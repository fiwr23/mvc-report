{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <nav>
        <ul>
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
            <li><a href="#kmom04">kmom04</a></li>
            <li><a href="#kmom05">kmom05</a></li>
            <li><a href="#kmom06">kmom06</a></li>
            <li><a href="#kmom10">kmom10</a></li>
        </ul>
    </nav>
    <h1>Report</h1>
    <div id="kmom01" class="kmom">
    <h2>kmom01</h2>
    <p> Mina tidigare erfarenheter kring objektorientering kommer främst från python kursen jag nyligen klarade av.
        Där jobbade vi ingående med klasser - ritningarna för objekten som skapas, metoder, arv etc. Det ska bli intressant att se hur 
        objekt orienterad programmering i php skiljer sig. <br>Jag har också provat på lite objekt orienterad 
        programmering i javascript. 
        <br>
        Klasser är själva grunden/ritningen som vi får objekt/instanser från med hjälp av 'new' följt av klassens namn. Som exempel:<br>
        $NewInstance = new TheClass();<br>
        Nu kan man använda sig av metoder och spara unika data i det nya objektet. Man kan skapa flera objekt från samma klass bara de har unika namn.
        <br>
        Symfony är ett open source ramverk som bör effektivisera programmering genom ett smidigare återanvändande av kod. 
        Integrationen av twig bör även det effektivisera och möjliggöra återanvändandet av vyer. När jag blivit mer hemmastadd lär så vara fallet. 
        Just nu känner jag mest lite frustration då själva installationen av Symfony strulade. 
        Sedan fick jag mer bekymmer med encore då min node.js installation i windows "krockade" med den i ubuntu. 
        Förhoppningsvis ska allt flyta på bättre i fortsättningen.
        <br>
        Något extra intressant med artikeln “PHP The Right Way” är att den konstant hålls up to date vilket är extremt värdefullt 
        då nätet kryllar av gammal information som kanske inte stämmer längre. Det som jag vill lära mig mer av är unittesting. 
        <br>
        Mitt TIL är att med namespaces kan man gruppera funktioner och klasser. Det är även ett sätt att undvika namn kollisioner.
        <br>
    </p>
    </div>
    <div id="kmom02" class="kmom">
    <h2>kmom02</h2>
    <p>
        Här följer först förklaringarna för de objektorienterade konstruktionerna:<br>
        Arv är när en klass ärver public eller protected metoder och variabler från förädraklassen.
         Komposition konstruktionen är när en klass skapas/är del av en annan. 
         Ett slags kontrakt gällande vilka publika metoder som måste finnas i en klass kallas interface.
          Trait är lite ungefär som kod med metoder som går att klistra in i andra klasser. 
          Bra då en klass kan bara ärva från en annan klass.<br>
        Min implementation flöt på hyfsat bra. Först skrev jag klasserna för Card och CardGraphic. 
        Då de bara lagrar/returnerar text och grafik värden gav de mig inga problem.
         Sedan skrev jag DeckOfCards klassen där korten skapas. Det blev en del arbete då ett antal arrays krävdes 
         för kortens värden och sort.
        Dessa mergas och används vid skapandet av CardGraphic korten till kortleken som  kontrollerna 
        använder sig av till länkarna och sparandet i sessionen.<br>  
        Förbättringspotential finns säkert men jag kan inte komma på vad just nu. 
        Mina reflektioner så här långt med att jobba i Symfony och MVC är att jag ser potentialen. 
        När man väl förstår hur allt fungerar och det "klickar" kommer kodandet säkert få en rejäl boost. 
        Ännu känns allt lite omständigt men det blir säkert bättre framöver.<br>
        Mitt TIL är att två använda Traits i en klass inte kan ha metoder med samma namn då det 
        ger ett fatal error. Då måste man använda 'insteadof' eller 'as' operatörerna.<br>
            
    </p>
    </div>
    <div id="kmom03" class="kmom">
    <h2>kmom03</h2>
    <p>
        Med lite erfarenhet sedan tidigare av flödesdiagram visste jag vad det rörde sig om - 
        att tänka ut och beskriva i stora drag hela händelseförloppet samt dess avgreningar med 
        former, pilar och text. Det flöt på bra.<br>
        Arbetet med pseudokod blev lite mer av en utmaning då man skulle tänka ut funktioner i 
        förväg innan man vid kodandet behövde dem. Den processen kan ha lett till en 
        effektivisering av kodandet. Men, det ska erkännas, genomförandet av vissa kod avsnitt 
        hakade upp sig och krävde tid ändå.<br>
        Vid implementationen använde jag mig av kort samt kortleks klasserna sedan tidigare moment. 
        En kort hand klass som nyttjas av både spelare och bank skapades också. Själva spel logiken 
        samlades i en egen klass. Den anropas vid i princip alla moment. <br>
        Händelseförloppet går framåt via spelarens klick på knappar placerade ovanför respektive 
        korthand. Då jag inte ville att banken automatiskt tog alla sina steg på en gång får 
        användaren klicka fram de också. Spelaren och banken använder därför till stor del samma 
        funktioner. Undantaget är att banken stannar vid 17.<br>
        Det finns förbättringpotential med min kod. Den kunde återanvändas bättre samt läggas ut 
        i fler klasser.<br>
        Att koda i symfony har blivit mer smärtfritt nu då man vant sig vid hela strukturen. 
        Det som var mer av en utmaning under detta moment var phpmd och phpstan. 
        Några klagomål var svårtydda vilket ledde till en del sökande online. Speciellt ett 
        klagomål från phpstan på en array map funktion ledde till avancerat letande efter lösningen 
        i en github issue.<br>
        Mitt TIL är att en variabels namn inte bör vara längre än 20 bokstäver.<br>
    </p>
    </div>
    <div id="kmom04" class="kmom">
    <h2>kmom04</h2>
    <p>
    Att programmera tester för PHPUnit påminde om vad jag tidigare jag provat på i en python kurs. 
    Efter installation samt tilläggande av start script i composer.json fungerar det på samma sätt 
    som de andra installerade testerna. Utmaningen att täcka 100% av koden tog lite tid och 
    klurande men det löste sig. Coverage rapporten var av stor nytta då den rödmarkerade vilka 
    rader som undsluppit mina tester. Så ja, jag klarade av 100% täckning.<br>

    Då jag fick 100% täckning får man väl anse den vara "testbar kod". Men koden är lite omständig 
    och borde kunna slimmas en del. Jag gjorde bara små justeringar hos klassernas metoder så i 
    stort är den intakt sedan tidigare. Däremot lade jag till kodblock för alla klasser och metoder.
    <br>
    Testbar kod kan säkert identifiera snygg och ren kod. Om man kan enkelt provköra en funktions 
    alla möjliga vägar borde den vara hyfsat strukturerad. Men samtidigt kanske det fattas "smarta 
    genvägar" man kunde tagit. Ju mer komplex en funktion är desto troligare finns det möjlighet 
    till en genväg någonstans.<br>

    Mitt TIL är att CRAP (Change Risk Anti-Patterns) är ett index som mäter komplexiteten i kod. 
    Varje funktion/metod kan som bäst få indexet 1 medan en klass tilldelas summan av metodernas 
    index.  
    </p>
    </div>
    <div id="kmom05" class="kmom">
    <h2>kmom05</h2>
    <p>Text</p>
    </div>
    <div id="kmom06" class="kmom">
    <h2>kmom06</h2>
    <p>Text</p>
    </div>
    <div id="kmom10" class="kmom">
    <h2>kmom10</h2>
    <p>Text</p>
    </div>
{% endblock %}